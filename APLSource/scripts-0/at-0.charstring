⍝ ⍺ at ⍵⍵ in ⍵

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ selection by index:

    '*'⊣at 2 4 ⊢5↑⎕A            ⍝ * at 2nd and 4th items
A*C*E

    M←5 5⍴⍳25

    0 ⊣at 2 4 ⊢M                ⍝ 0 at 2nd and 4th rows
 1  2  3  4  5
 0  0  0  0  0
11 12 13 14 15
 0  0  0  0  0
21 22 23 24 25

    (2 5⍴⎕a) ⊣at 2 4 ⊢M         ⍝ A..J at 2nd and 4th rows
 1  2  3  4  5
 A  B  C  D  E
11 12 13 14 15
 F  G  H  I  J
21 22 23 24 25

    0 ⊣at 2 4⍤1 ⊢M              ⍝ 0 at 2nd and 4th cols
 1 0  3 0  5
 6 0  8 0 10
11 0 13 0 15
16 0 18 0 20
21 0 23 0 25

   (⍉2 5⍴⎕a) ⊣at 2 4⍤1 ⊢M       ⍝ A..J at 2nd and 4th cols
 1 A  3 F  5
 6 B  8 G 10
11 C 13 H 15
16 D 18 I 20
21 E 23 J 25

    ⌽ at 2 4 ⊢M                 ⍝ reverse of 2nd and 4th row (boustrophedon)
 1  2  3  4  5
10  9  8  7  6
11 12 13 14 15
20 19 18 17 16
21 22 23 24 25

    0 ⊣at 2 4⍤1 at 2 4 ⊢M       ⍝ cf: M[2 4;2 4]←0
 1  2  3  4  5
 6  0  8  0 10
11 12 13 14 15
16  0 18  0 20
21 22 23 24 25

    0 ⊣at (2 4∘.,2 4) ⊢5 5⍴⍳25  ⍝ ditto using choose indexing
 1  2  3  4  5
 6  0  8  0 10
11 12 13 14 15
16  0 18  0 20
21 22 23 24 25

    (2 2⍴⎕a)⊣at 2 4⍤1 at 2 4 ⊢M             ⍝ cf: M[2 4;2 4]←2 2⍴⎕A
 1  2  3  4  5
 6  A  8  B 10
11 12 13 14 15
16  C 18  D 20
21 22 23 24 25

    (2 2 5⍴lcase ⎕a)⊣at(2 2⍴⍳4)⊢5 5⍴⎕A      ⍝ check conformability rules
abcde
fghij
klmno
pqrst
UVWXY

    '⍟'⊣at(1 5)(2 2)⊢'hello' 'world'        ⍝ reach
 hell⍟  w⍟rld 

    10×at 2 4 ⊢⍳5               ⍝ 10× at ...
1 20 3 40 5

    1+at 2 2 ⊢5/0               ⍝ nb: dups ignored
0 1 0 0 0

    0 at 1 ⍳2                   ⍝ error: left operand must be a function
2::SYNTAX ERROR

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ boolean selection:

    '*'⊣at(∊∘'AEIOU') ⎕A        ⍝ vowels
*BCD*FGH*JKLMN*PQRST*VWXYZ

    100×at(2∘|)⍤1 ⊢M            ⍝ alternately × 100
 100    2  300    4  500
   6  700    8  900   10
1100   12 1300   14 1500
  16 1700   18 1900   20
2100   22 2300   24 2500

    {∊¨(0=3 5∘|¨⍵)/¨⊂'fizz' 'buzz'}at(0∨.=3 5∘.|⊢)⍤1 ⊢3 4 5⍴⍳60
    1     2  fizz     4  buzz     
 fizz     7     8  fizz  buzz     
   11  fizz    13    14  fizzbuzz 
   16    17  fizz    19  buzz     
                                  
 fizz    22    23  fizz  buzz     
   26  fizz    28    29  fizzbuzz 
   31    32  fizz    34  buzz     
 fizz    37    38  fizz  buzz     
                                  
   41  fizz    43    44  fizzbuzz 
   46    47  fizz    49  buzz     
 fizz    52    53  fizz  buzz     
   56  fizz    58    59  fizzbuzz 

    '*'⊣at(⍉∊∘'AEIOU')4 5⍴⎕A        ⍝ mask not conformable with right arg
5::LENGTH ERROR

⍝ Roger Hui's model of "Mesh" and "Mask", implemented using [at]:

⍝ Mesh (APL, 1962) -------------------------------------------------------------

⍝   c ← a (u Mesh) b    ←→    ((~u)⌿c)≡a and (u⌿c)≡b

    ⎕io←0

    a ← 33 44 55
    b ← ⍳10
    u ← 1 1 0 1 1 1 1 0 1 1 1 0 1

    ↑ u (b ⊣at(u⊣⊣) (~u)⍀a)
1 1  0 1 1 1 1  0 1 1 1  0 1
0 1 33 2 3 4 5 44 6 7 8 55 9

    c←b ⊣at(u⊣⊣) (~u)⍀a
    a ≡ (~u)⌿c
1
    b ≡ u⌿c
1
    c ≡ b ⊣at(u/⍳≢u) ⊢(~u)⍀a
1

⍝ The last version with the integer right operand is required for meshing major
⍝ cells.

    a←2⍴⍤0 ⊢33 44 55
    b←2⍴⍤0 ⍳10
    c ← b ⊣at(u/⍳≢u) ⊢(~u)⍀a
    a ≡ (~u)⌿c
1
    b ≡ u⌿c
1

⍝ Mask (APL, 1962) -------------------------------------------------------------

⍝   c ← a (u Mask) b    ←→    ((~u)⌿c)≡(~u)⌿a and (u⌿c)≡u⌿b

For numeric vectors a and b,

    a ← ⍳13
    b ← 20+⍳13
    u ← 13⍴0 0 1
    c ← (a×~u) + b×u

    ↑ u (b (u⌿⊣)at(u⊣⊣) a)
0 0  1 0 0  1 0 0  1 0  0  1  0
0 1 22 3 4 25 6 7 28 9 10 31 12

    c ← b (u⌿⊣)at(u⊣⊣) a
    ((~u)⌿c) ≡ (~u)⌿a
1
    (u⌿c)≡u⌿b
1
    c ≡ b (u⌿⊣)at(u/⍳≢u) ⊢a
1

⍝ Again, the last version with the integer right operand is required for masking
⍝ major cells.

    a ← 2⍴⍤0 ⊢⍳13
    b ← 2⍴⍤0 ⊢20+⍳13
    c ← b (u⌿⊣)at(u/⍳≢u) ⊢a
    ((~u)⌿c) ≡ (~u)⌿a
1
    (u⌿c)≡u⌿b
1

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ example: gauss-jordan elimination

    ⎕io←0
    
    gauss_jordan 2 2⍴⍳5         ⍝ test current coding
¯1.5 0.5
 1   0  

    gauss_jordan←{⎕IO ⎕ML←0 1                   ⍝ recoded to use [at]:

        elim←{                                  ⍝ elimination of row/col ⍺.
            p←⍺+{⍵⍳⌈/⍵}|⍺↓⍺⌷⍉⍵                  ⍝ index of pivot row.
            swap←⊖at ⍺ p⊢⍵                      ⍝ exchange of ⍺th and pth rows.
            mat←(⍺ ⍺⌷swap)÷⍨at ⍺⊢swap           ⍝ with col diagonal reduced to 1.
            mat-((⍺⌷⍉mat)×⍺≠⍳⊃⍴⍵)∘.×⍺⌷mat       ⍝ col off-diagonals reduced to 0
        }

        0::⎕SIGNAL ⎕EN                          ⍝ pass back error to caller.    
                                                                            
        ⍺←=/↑⍳⍴⍵                                ⍝ id matrix for monadic case.

        (⍴⍺)⍴(0 1×⍴⍵)↓↑elim/(⌽⍳⌊/⍴⍵),⊂⍵,⍺       ⍝ elimination/ ··· 2 1 0 (⍵,⍺)
    }

    gauss_jordan 2 2⍴⍳5         ⍝ same result
¯1.5 0.5
 1   0  

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ extended versions:
⍝
⍝ This version avoids name-clashes by applying operand functions
⍝ at the outer lexical level:

    at←{⍺←⊢                             ⍝ ⍺ at ⍵⍵ in ⍵
        ⍺ ⍺⍺{⍺←⊢                        ⍝ external operand
            ⍺ ⍺⍺ ⍵                      ⍝   to hide name "A"
        }{⍺←⊢                           ⍝ selection
            A⊣A[⍵]←⍺ ⍺⍺(A←⍵⍵)[⍵]        ⍝ replaced values
        }⍵⊢⍺⍺{                          ⍝ choose-indices for selection
            3=⎕NC'⍵⍵':(,~~⍵⍵ ⍵)/,⍳⍴⍵    ⍝ function: bool selection
            (⊂⍵⍵)⌷[⎕IO]⍳⍴⍵              ⍝ choose-indices
        }⍵⍵⊢⍵                           ⍝ ⍵ is subject array
    }

    exec←⍎∘('⎕nl-⍳10'∘⊣)        ⍝ list of visible names

    (exec 1)≡⊃(⊂ exec)at{1},0   ⍝ check left operand sees no local names
1
    ones ← 1 ⊣¨ exec            ⍝ 1 1 .. 1 for each visible name.

    ∧/(ones 1)⊣at ones ⎕nl-⍳10  ⍝ check right operand (should not LENGTH ERROR)
1

⍝ In addition, the following version produces extended error messages:

    at←{⍺←⊢                                 ⍝ ⍺ at ⍵⍵ in ⍵
        {
            err rslt←⍵                      ⍝ error code and result
            err=0:rslt                      ⍝ no error: replaced values
            msg←⎕io⊃⎕dm                     ⍝ main message
            sub←{                           ⍝ subsidiary message
                1=⍵:'left'                  ⍝ modifier operand error
                2=⍵:'indexing right'        ⍝ indexing selector error
                3=⍵:'boolean right'         ⍝ mask selector error
            }err                            ⍝ error code
            dmx←': ',sub,' operand'         ⍝ message extension
            (msg,dmx)⎕signal ⎕en            ⍝ signal error to calling line
        }⍺ ⍺⍺{⍺←⊢                           ⍝ external evaluation of modifier fn
            0::1 ⍬                          ⍝ error:
            0,⊂⍺ ⍺⍺ ⍵                       ⍝ code and value
        }{⍺←⊢                               ⍝ selection
            err indx←⍵                      ⍝ error code and index vector
            err>0:⍵                         ⍝ error: quit
            0::1 ⍬                          ⍝ 1: left operand error
            err new←⍺ ⍺⍺ ⍵⍵[indx]           ⍝ error code and successor value
            ×err:err new                    ⍝ error: quit
            0,⊂A⊣A[indx]←new⊣A←⍵⍵           ⍝ replaced values
        }⍵⊢⍺⍺{                              ⍝ choose-indices for selection
            0::3 ⍬                          ⍝ 3: function right-operand error
            3=⎕nc'⍵⍵':0,⊂(,~~⍵⍵ ⍵)/,⍳⍴⍵     ⍝ function: bool selection
            0::2 ⍬                          ⍝ 2: array right-operand error
            0,⊂(⊂⍵⍵)⌷[⎕io]⍳⍴⍵               ⍝ choose-indices
        }⍵⍵⊢⍵                               ⍝ ⍵ is subject array
    }

    ⊢at⊃ ⎕a
11::DOMAIN ERROR: boolean right operand
    1+at{0 2}3 4
11::DOMAIN ERROR: boolean right operand
    ⊢at{1 1}⎕A
5::LENGTH ERROR: boolean right operand
    ⊢at ¯1⊢⎕A
3::INDEX ERROR: indexing right operand
    ⊢at'a'⊢⎕A
11::DOMAIN ERROR: indexing right operand

    1 2+at 1⊢3 4 5
5::LENGTH ERROR: left operand
    'a'+at 1⊢3 4 5
11::DOMAIN ERROR: left operand

    (exec 1)≡⊃(⊂ exec)at{1},0   ⍝ check left operand sees no local names
1
    ∧/(ones 1)⊣at ones ⎕nl-⍳10  ⍝ check right operand (should not LENGTH ERROR)
1
