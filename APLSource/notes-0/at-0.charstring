rslt ← {new} (mod ##.at sel) old        ⍝ item substitution: new at sel in old

[sel]ected items of [old] are [mod]ified with those in [new] to produce [rslt].

    10(× at 2 4)⍳5              ⍝ ten-fold at 2nd and 4th items in 1..5
1 20 3 40 5

    ⌽ at(2+⍳4) ⊢'redrawing'     ⍝ reversal of section of character vector
rewarding

The [sel]ection operand can be one of:

- A simple numeric array of indices along the first axis, as above, or a
- A nested array of choose/reach indices, or a
- A monadic function which, when applied to [old], returns a Boolean mask:

    '*' ⊣at(<∘0) 3 ¯1 4 1 ¯5        ⍝ function operand: stars for -ive values
3 * 4 1 *

    (⊂'fizz')⊣at{0=3|⍵} ⍳10         ⍝ "fizz" at every 3rd number
┌─┬─┬────┬─┬─┬────┬─┬─┬────┬──┐
│1│2│fizz│4│5│fizz│7│8│fizz│10│
└─┴─┴────┴─┴─┴────┴─┴─┴────┴──┘

Background
----------
Classic APL lacks a general, non-procedural  way to express the "triadic" funct-
ion: "THESE items at THOSE positions in THIS array".  For example: "Asterisks at
the vowel positions in the alphabet". Rather,  it  compels  us  to use a 3-stage
_procedure_  and requires us to name an intermediate subject array:

    [1] Name the subject array,                 ⍝ THIS ← ...
    [2] Mutate the array, using its name,       ⍝ THIS[THOSE]←THESE
    [3] Dereference the name for the result.    ⍝ ... THIS

(muse:

    Ideally, the language should not force us into naming the results of expr-
    essions merely for reasons of syntax. Better that we choose to name things
    only in order to create mental abstractions that are easier to comprehend.

    Sound bite: "Names let us chop up our programs into mind-sized chunks."

    As an example, the following three code fragments are equivalent and each
    reducible by the language evaluator to the syntax tree on the right. Ideal-
    ly, the choice should depend only on the perceived simplicity of expression.

    (+⌿⍵)÷≢⍵                                    ⍝
                                                ⍝        ┌───┼─┐
    sum←+⌿⍵ ⋄ num←≢⍵  ⋄ sum÷num                 ⍝        ├─┐ ÷ ├─┐
                                                ⍝      ┌─┤ ⍵   ≢ ⍵
    sum←+⌿ ⋄ num←≢ ⋄ (sum ⍵)÷num ⍵              ⍝      + ⌿

    This approach differs from that of "variable-centric" languages, where names
    must be declared to reserve storage locations and otherwise participate in
    the mechanics of evaluation.
)

Technical notes:

1. Internally [at] uses regular indexed assignment:

        A⊣A[indx]←⍺ ⍺⍺(A←⍵)[indx]       ⍝ nb: duplicate indices ignored

   in preference to the shorter _modified_ indexed assignment:

        A⊣A[indx]←⍺⍺⍨←⍺⊣A←⍵             ⍝ (not used)

   in order for the _whole_ of the selected sub-array, rather than just one item
   at a time, to be presented to  the  [mod]ification function ⍺⍺.  This allows,
   for example, operations on whole rows:

        1 ⌽at 2 ⊢3 5⍴⍳15                ⍝ 1-rotation of middle row.
     1  2  3  4  5
     7  8  9 10  6
    11 12 13 14 15

2. In the case where the  [sel]ection operand is a (Boolean-returning) function,
   the  ravel  of  the mask selects from the ravel of the right argument's index
   array.

        '*'⊣at(∊∘'AEIOU') 5 5⍴⎕A        ⍝ stars for vowels in char matrix
    *BCD*
    FGH*J
    KLMN*
    PQRST
    *VWXY

3. This simple model claims only to be adequate for experimentation. An industr-
   ial strength version would need to add:

 - Better error messages. In particular indication of whether a problem has occ-
   urred with the left (modifier) or right (selection) operand.

 - Defence  against  the possibility of a nameclash between at's local names and
   those of its operand functions.

   Examples of such coding can be found towards the end of: ##.scripts.at

Examples:

    '*'⊣at 2 4 ⊢5↑⎕A            ⍝ '*' at 2nd and 4th items
A*C*E

    M ← 5 5⍴ ⍳25                ⍝ 5×5 numeric matrix

    0 ⊣at 2 4 ⊢M                ⍝ 0 at 2nd and 4th rows
 1  2  3  4  5
 0  0  0  0  0
11 12 13 14 15
 0  0  0  0  0
21 22 23 24 25

    (2 5⍴⎕a) ⊣at 2 4 ⊢M         ⍝ A..J at 2nd and 4th rows
 1  2  3  4  5
 A  B  C  D  E
11 12 13 14 15
 F  G  H  I  J
21 22 23 24 25

    0 ⊣at 2 4⍤1 ⊢M              ⍝ 0 at 2nd and 4th cols
 1 0  3 0  5
 6 0  8 0 10
11 0 13 0 15
16 0 18 0 20
21 0 23 0 25

    (⍉2 5⍴⎕a)⊣ at 2 4⍤1 ⊢M      ⍝ A..J at 2nd and 4th cols
 1 A  3 F  5
 6 B  8 G 10
11 C 13 H 15
16 D 18 I 20
21 E 23 J 25

    0 ⊣at 2 3 4⍤1 at 2 3 4 ⊢M   ⍝ cf: M[2 3 4;2 3 4]←0      nested [at]s
 1  2  3  4  5
 6  0  0  0 10
11  0  0  0 15
16  0  0  0 20
21 22 23 24 25

    (2 2⍴⎕A)⊣at(1 5∘.,1 5) ⊢M   ⍝ cf: M[1 5;1 5]←2 2⍴⎕A     choose indexing
 A  2  3  4  B
 6  7  8  9 10
11 12 13 14 15
16 17 18 19 20
 C 22 23 24  D

    ⌽ at 2 4 ⊢M                 ⍝ reverse of 2nd and 4th row (boustrophedon)
 1  2  3  4  5
10  9  8  7  6
11 12 13 14 15
20 19 18 17 16
21 22 23 24 25

    '⍟'⊣at(1 5)(2 2)⊢'hello' 'world'        ⍝ reach
┌─────┬─────┐
│hell⍟│w⍟rld│
└─────┴─────┘

    10×at 2 4 ⍳5                ⍝ 10× at ...
1 20 3 40 5

    10×at 2 2 ⍳5                ⍝ nb: dups ignored
1 20 3 4 5

⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ boolean selection:

    '*'⊣at(∊∘'AEIOU') ⎕A        ⍝ vowels
*BCD*FGH*JKLMN*PQRST*VWXYZ

    100×at(2∘|)⍤1 ⊢M            ⍝ alternately × 100
 100    2  300    4  500
   6  700    8  900   10
1100   12 1300   14 1500
  16 1700   18 1900   20
2100   22 2300   24 2500

    {∊¨(0=3 5∘|¨⍵)/¨⊂'fizz' 'buzz'}at{0∨.=3 5∘.|⍵}⍤1 ⊢3 4 5⍴⍳60
┌────┬────┬────┬────┬────────┐
│1   │2   │fizz│4   │buzz    │
├────┼────┼────┼────┼────────┤
│fizz│7   │8   │fizz│buzz    │
├────┼────┼────┼────┼────────┤
│11  │fizz│13  │14  │fizzbuzz│
├────┼────┼────┼────┼────────┤
│16  │17  │fizz│19  │buzz    │
└────┴────┴────┴────┴────────┘
┌────┬────┬────┬────┬────────┐
│fizz│22  │23  │fizz│buzz    │
├────┼────┼────┼────┼────────┤
│26  │fizz│28  │29  │fizzbuzz│
├────┼────┼────┼────┼────────┤
│31  │32  │fizz│34  │buzz    │
├────┼────┼────┼────┼────────┤
│fizz│37  │38  │fizz│buzz    │
└────┴────┴────┴────┴────────┘
┌────┬────┬────┬────┬────────┐
│41  │fizz│43  │44  │fizzbuzz│
├────┼────┼────┼────┼────────┤
│46  │47  │fizz│49  │buzz    │
├────┼────┼────┼────┼────────┤
│fizz│52  │53  │fizz│buzz    │
├────┼────┼────┼────┼────────┤
│56  │fizz│58  │59  │fizzbuzz│
└────┴────┴────┴────┴────────┘

⍝ Roger Hui's model of "Mesh" and "Mask", implemented using [at]:

⍝ Mesh (APL, 1962) -------------------------------------------------------------

⍝   c ← a (u Mesh) b    ←→    ((~u)⌿c)≡a and (u⌿c)≡b

    ⎕io ← 0
    a ← 33 44 55
    b ← ⍳10
    u ← 1 1 0 1 1 1 1 0 1 1 1 0 1

    ↑ u (b ⊣at(u⊣⊣) (~u)⍀a)
1 1  0 1 1 1 1  0 1 1 1  0 1
0 1 33 2 3 4 5 44 6 7 8 55 9

    c ← b ⊣at(u⊣⊣) (~u)⍀a
    a ≡ (~u)⌿c
1
    b ≡ u⌿c
1
    c ≡ b ⊣at(u/⍳≢u) ⊢(~u)⍀a
1

⍝ The last version with the integer right operand is required for meshing major
⍝ cells.

      a ← 2⍴⍤0 ⊢33 44 55
      b ← 2⍴⍤0⍳10
      c ← b ⊣at(u/⍳≢u) ⊢(~u)⍀a
      a ≡ (~u)⌿c
1
      b ≡ u⌿c
1

⍝ Mask (APL, 1962) -------------------------------------------------------------

⍝   c ← a (u Mask) b    ←→    ((~u)⌿c)≡(~u)⌿a and (u⌿c)≡u⌿b

For numeric vectors a and b,

    a ← ⍳13
    b ← 20+⍳13
    u ← 13⍴0 0 1
    c ← (a×~u) + b×u

    ↑ u (b (u⌿⊣)at(u⊣⊣) a)
0 0  1 0 0  1 0 0  1 0  0  1  0
0 1 22 3 4 25 6 7 28 9 10 31 12

    c ← b (u⌿⊣)at(u⊣⊣) a
    ((~u)⌿c) ≡ (~u)⌿a
1
    (u⌿c)≡u⌿b
1
    c ≡ b (u⌿⊣)at(u/⍳≢u) ⊢a
1

⍝ Roger says: again, the last version with the integer right operand is
⍝ required for masking major cells.

    a ← 2⍴⍤0 ⊢⍳13
    b ← 2⍴⍤0 ⊢20+⍳13
    c ← b (u⌿⊣)at(u/⍳≢u) ⊢a
    ((~u)⌿c) ≡ (~u)⌿a
1
    (u⌿c)≡u⌿b
1

⍝ Here is how the inner "Gaussian elimination" function from →gauss_jordan←
⍝ might look when converted from a procedural style, which mutates the matrix
⍝ in two places:

    elim←{                                  ⍝ elimination of row/col ⍺.
        mat←⍵                               ⍝ name matrix for updating.
        p←⍺+{⍵⍳⌈/⍵}|⍺↓mat[;⍺]               ⍝ index of pivot row.
        mat[⍺ p;]←mat[p ⍺;]                 ⍝ exchange ⍺th and pth rows.    !!
        mat[⍺;]÷←mat[⍺;⍺]                   ⍝ reduce col diagonal to 1.     !!
        mat-(mat[;⍺]×⍺≠⍳⊃⍴⍵)∘.×mat[⍺;]      ⍝ reduce col off-diagonals to 0.
    }

⍝ ... to a functional definition using [at], which does not. To better show the
⍝ impact of a _primitive_ operator, the glyph "@" has abitrarily been chosen to
⍝ represent [at] in these coding examples:

    elim←{                                  ⍝ elimination of row/col ⍺.
        p←⍺+{⍵⍳⌈/⍵}|⍺↓⍵[;⍺]                 ⍝ index of pivot row.
        swap←⊖@⍺ p⊢⍵                        ⍝ ⍺th and pth rows exchanged.   !
        mat←swap[⍺;⍺]÷⍨@⍺⊢swap              ⍝ col diagonal reduced to 1.    !
        mat-(mat[;⍺]×⍺≠⍳⊃⍴⍵)∘.×mat[⍺;]      ⍝ col off-diagonals reduced to 0.
    }

⍝ and here's the same indexed-assignment replacement for function →span←

    span←{                      ⍝ Spanning tree for graph ⍺ from vertex(ices) ⍵.
        graph←⍺                 ⍝ ⍺ is graph vector.
        tree←¯2+(⍳⍴⍺)∊⍵         ⍝ initial spanning tree.
        free←{(¯2=tree[⍵])/⍵}   ⍝ free vertices in ⍵.
        {                       ⍝ visit adjacent vertices:
            ⍵≡⍬:tree            ⍝ no vertices: done.
            next←free¨graph[⍵]  ⍝ next vertices to visit.
            back←↑,/⍵+0×next    ⍝ back links.
            wave←↑,/next        ⍝ wave front.
            tree[wave]←back     ⍝ set back links in tree        !!
            ∇ ∪wave             ⍝ advance wave front.
        }⍵                      ⍝ from starting vertex.
    }

⍝ which becomes:

    span←{                        ⍝ Spanning tree for graph ⍺ from vertex(ices).
        graph←⍺                   ⍝ ⍺ is graph vector.
        tree←¯2+(⍳⍴⍺)∊⍵           ⍝ initial spanning tree.
        free←{(¯2=⍺[⍵])/⍵}        ⍝ free vertices in ⍵.                 !
        tree{                     ⍝ ⍺: partial spanning tree.           !
            ⍵≡⍬:⍺                 ⍝ no vertices: done.                  !
            next←⍺∘free¨graph[⍵]  ⍝ next vertices to visit.             !
            back←↑,/⍵+0×next      ⍝ back links.
            wave←↑,/next          ⍝ wave front.
            part←back⊣@wave⊢⍺     ⍝ back links at wave front            !
            part ∇ ∪wave          ⍝ partial tree; advanced wave front   !
        }⍵                        ⍝ ⍵: next wave of vertices to visit.
    }

⍝ Finally, here are some more code snippets from this workspace, which might be
⍝ improved with the introduction of a primitive @ (say) operator. The lines are
⍝ marked: <old and >new:

<dots[11-14] dmask←,2=flood-xdents ⋄ crep←⍵ ⋄ crep[dmask/,⍳⍴⍵]←⍺ ⋄ crep
>dots[11]    ⍺⊣@{2=flood-xdents}⍵

<packZ[14]  tree←⍵ ⋄ tree[posn]←⊂sub
>packZ[14]  tree←(⊂sub)⊣@posn⊢⍵

<remlink[1-2] graph←⍺ ⋄ fm to←⍵ ⋄ graph⊣(fm⊃graph)~←to
>remlink[1-2]           fm to←⍵ ⋄ ~∘to¨@fm⊢⍺

<ssword[5-7] cvex←⍺ words srce ⋄ mask←cvex∊⊂find ⋄ ∊cvex⊣(mask/cvex)←⊂repl
>ssword[7]   ∊(⊂repl)⊣@{⍵∊⊂find}⍺ words srce

<sudoku[30] ⍵∘{m←⍺ ⋄ (i⊃m)←,⍵ ⋄ m}¨i⊃⍵
>sudoku[30] (i⊃⍵)⊣@i¨⊂⍵

<notes.sudoku[242 244] pvec←{(⍺ avl ⍵)(⍺ at)¨⊂⍵} ⋄ at←{⍵+⍺×(⍳⍴⍵)∊⊂⍺⍺}
>notes.sudoku[242]     pvec←{(⍺ avl ⍵)⊣@(⊂⍺)¨⊂⍵}

<von[27] (b/tx)←ucase b/tx ⋄ ¯1↓tx
>von[27] ¯1↓ucase@{b}tx

<wsdiff[38-39] mask←,(⍵=' ')∧(⍴⍵)⍴cols⍴4↑1 ⋄ mat←⍵ ⋄ mat⊣(mask/,mat)←'·'
>wsdiff[38]    '·'⊣@{(⍵=' ')∧(⍴⍵)⍴cols⍴4↑1}⍵

See also: sam

Index:assignment, indexed|assignment, destructive|assignment, selective
Index:boustrophedon|merge|mask|mesh
Index;Hui R.K.W.|Hsu A.|Last P.
